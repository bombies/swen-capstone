{
  "openapi": "3.0.0",
  "paths": {
    "/": {
      "get": {
        "operationId": "getHello",
        "parameters": [],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "App"
        ]
      }
    },
    "/auth/login": {
      "post": {
        "operationId": "login",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LoginDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Login successful",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "access_token": {
                      "type": "string"
                    },
                    "refresh_token": {
                      "type": "string"
                    },
                    "user": {
                      "type": "object"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Invalid credentials."
          }
        },
        "summary": "User login",
        "tags": [
          "auth"
        ]
      }
    },
    "/auth/refresh": {
      "post": {
        "operationId": "refreshToken",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RefreshTokenDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Token refresh successful",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "access_token": {
                      "type": "string"
                    },
                    "refresh_token": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Invalid refresh token."
          }
        },
        "summary": "Refresh access token",
        "tags": [
          "auth"
        ]
      }
    },
    "/auth/logout": {
      "post": {
        "operationId": "logout",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LogoutDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Logout successful",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized."
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Logout from current device",
        "tags": [
          "auth"
        ]
      }
    },
    "/auth/logout-all": {
      "post": {
        "operationId": "logoutAll",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Logout from all devices successful",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized."
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Logout from all devices",
        "tags": [
          "auth"
        ]
      }
    },
    "/auth/switch-role": {
      "post": {
        "operationId": "switchRole",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SwitchRoleDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Role switch successful",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "access_token": {
                      "type": "string"
                    },
                    "role": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized."
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Switch user role",
        "tags": [
          "auth"
        ]
      }
    },
    "/auth/sessions": {
      "get": {
        "operationId": "getActiveSessions",
        "parameters": [],
        "responses": {
          "200": {
            "description": "List of active sessions",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "string"
                      },
                      "deviceInfo": {
                        "type": "object"
                      },
                      "lastActive": {
                        "type": "string"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized."
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get active sessions",
        "tags": [
          "auth"
        ]
      }
    },
    "/auth/profile": {
      "get": {
        "operationId": "getProfile",
        "parameters": [],
        "responses": {
          "200": {
            "description": "User profile information",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string"
                    },
                    "email": {
                      "type": "string"
                    },
                    "firstName": {
                      "type": "string"
                    },
                    "lastName": {
                      "type": "string"
                    },
                    "role": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized."
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get user profile",
        "tags": [
          "auth"
        ]
      }
    },
    "/auth/register": {
      "post": {
        "operationId": "register",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RegisterDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Registration successful",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "access_token": {
                      "type": "string"
                    },
                    "refresh_token": {
                      "type": "string"
                    },
                    "user": {
                      "type": "object"
                    }
                  }
                }
              }
            }
          },
          "409": {
            "description": "User with this email already exists."
          }
        },
        "summary": "Register a new user as customer or merchant",
        "tags": [
          "auth"
        ]
      }
    },
    "/auth/add-role": {
      "post": {
        "operationId": "addRole",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AddRoleDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Role added successfully",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "message": {
                      "type": "string"
                    },
                    "roles": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    }
                  }
                }
              }
            }
          },
          "409": {
            "description": "User already has this role."
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Add a new role (merchant/customer) to the current user",
        "tags": [
          "auth"
        ]
      }
    },
    "/users": {
      "post": {
        "operationId": "create",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateUserDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "The user has been successfully created.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateUserDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad request."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Create a new user",
        "tags": [
          "users"
        ]
      },
      "get": {
        "operationId": "findAll",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Return all users.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CreateUserDto"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get all users",
        "tags": [
          "users"
        ]
      }
    },
    "/users/{id}": {
      "get": {
        "operationId": "findOne",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Return the user.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateUserDto"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "User not found."
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get a user by id",
        "tags": [
          "users"
        ]
      },
      "patch": {
        "operationId": "update",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateUserDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The user has been successfully updated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpdateUserDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad request."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "User not found."
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Update a user",
        "tags": [
          "users"
        ]
      },
      "delete": {
        "operationId": "remove",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The user has been successfully deleted."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "User not found."
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Delete a user",
        "tags": [
          "users"
        ]
      }
    },
    "/products": {
      "post": {
        "operationId": "create",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateProductDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "The product has been successfully created.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Product"
                }
              }
            }
          },
          "400": {
            "description": "Bad request."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Create a new product",
        "tags": [
          "products"
        ]
      },
      "get": {
        "operationId": "findAll",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Return all products.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Product"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized."
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get all products",
        "tags": [
          "products"
        ]
      }
    },
    "/products/search": {
      "get": {
        "operationId": "search",
        "parameters": [
          {
            "name": "q",
            "required": true,
            "in": "query",
            "description": "Search query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Return matching products.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Product"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized."
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Search products",
        "tags": [
          "products"
        ]
      }
    },
    "/products/category/{category}": {
      "get": {
        "operationId": "findByCategory",
        "parameters": [
          {
            "name": "category",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Return products in the specified category.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Product"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized."
          },
          "404": {
            "description": "Category not found."
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get products by category",
        "tags": [
          "products"
        ]
      }
    },
    "/products/merchant/{merchantId}": {
      "get": {
        "operationId": "findByMerchant",
        "parameters": [
          {
            "name": "merchantId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Return products for the specified merchant.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Product"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized."
          },
          "404": {
            "description": "Merchant not found."
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get products by merchant",
        "tags": [
          "products"
        ]
      }
    },
    "/products/{id}": {
      "get": {
        "operationId": "findOne",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Return the product.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Product"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized."
          },
          "404": {
            "description": "Product not found."
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get a product by id",
        "tags": [
          "products"
        ]
      },
      "patch": {
        "operationId": "update",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateProductDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The product has been successfully updated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Product"
                }
              }
            }
          },
          "400": {
            "description": "Bad request."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Product not found."
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Update a product",
        "tags": [
          "products"
        ]
      },
      "delete": {
        "operationId": "remove",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The product has been successfully deleted."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Product not found."
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Delete a product",
        "tags": [
          "products"
        ]
      }
    },
    "/payments": {
      "post": {
        "operationId": "create",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreatePaymentDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "The payment has been successfully created.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Payment"
                }
              }
            }
          },
          "400": {
            "description": "Bad request."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Create a new payment",
        "tags": [
          "payments"
        ]
      },
      "get": {
        "operationId": "findAll",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Return all payments.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Payment"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get all payments",
        "tags": [
          "payments"
        ]
      }
    },
    "/payments/order/{orderId}": {
      "get": {
        "operationId": "findByOrder",
        "parameters": [
          {
            "name": "orderId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Return the payment for the specified order.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Payment"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized."
          },
          "404": {
            "description": "Order not found."
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get payment by order ID",
        "tags": [
          "payments"
        ]
      }
    },
    "/payments/customer": {
      "get": {
        "operationId": "findByCustomer",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Return all payments for the current customer.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Payment"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get all payments for the current customer",
        "tags": [
          "payments"
        ]
      }
    },
    "/payments/merchant": {
      "get": {
        "operationId": "findByMerchant",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Return all payments for the current merchant.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Payment"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get all payments for the current merchant",
        "tags": [
          "payments"
        ]
      }
    },
    "/payments/{id}": {
      "get": {
        "operationId": "findOne",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Return the payment.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Payment"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized."
          },
          "404": {
            "description": "Payment not found."
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get a payment by id",
        "tags": [
          "payments"
        ]
      },
      "patch": {
        "operationId": "update",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdatePaymentDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The payment has been successfully updated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Payment"
                }
              }
            }
          },
          "400": {
            "description": "Bad request."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Payment not found."
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Update a payment",
        "tags": [
          "payments"
        ]
      }
    },
    "/payments/{id}/refund": {
      "post": {
        "operationId": "refund",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The payment has been successfully refunded.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Payment"
                }
              }
            }
          },
          "400": {
            "description": "Bad request."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Payment not found."
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Refund a payment",
        "tags": [
          "payments"
        ]
      }
    },
    "/payments/merchant/stats": {
      "get": {
        "operationId": "getPaymentStats",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Return payment statistics for the current merchant."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get payment statistics for the current merchant",
        "tags": [
          "payments"
        ]
      }
    },
    "/orders": {
      "post": {
        "operationId": "create",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateOrderDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "The order has been successfully created.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Order"
                }
              }
            }
          },
          "400": {
            "description": "Bad request."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Create a new order",
        "tags": [
          "orders"
        ]
      },
      "get": {
        "operationId": "findAll",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Return all orders.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Order"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized."
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get all orders",
        "tags": [
          "orders"
        ]
      }
    },
    "/orders/customer/{customerId}": {
      "get": {
        "operationId": "findByCustomer",
        "parameters": [
          {
            "name": "customerId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Return all orders for the customer.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Order"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Customer not found."
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get all orders for a customer",
        "tags": [
          "orders"
        ]
      }
    },
    "/orders/merchant/{merchantId}": {
      "get": {
        "operationId": "findByMerchant",
        "parameters": [
          {
            "name": "merchantId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Return all orders for the merchant.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Order"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Merchant not found."
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get all orders for a merchant",
        "tags": [
          "orders"
        ]
      }
    },
    "/orders/{id}": {
      "get": {
        "operationId": "findOne",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Return the order.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Order"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized."
          },
          "404": {
            "description": "Order not found."
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get a order by id",
        "tags": [
          "orders"
        ]
      },
      "patch": {
        "operationId": "update",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateOrderDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The order has been successfully updated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Order"
                }
              }
            }
          },
          "400": {
            "description": "Bad request."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Order not found."
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Update a order",
        "tags": [
          "orders"
        ]
      },
      "delete": {
        "operationId": "remove",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The order has been successfully cancelled.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Order"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Order not found."
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Cancel an order",
        "tags": [
          "orders"
        ]
      }
    },
    "/orders/{id}/status": {
      "patch": {
        "operationId": "updateStatus",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The order status has been successfully updated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Order"
                }
              }
            }
          },
          "400": {
            "description": "Bad request."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Order not found."
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Update order status",
        "tags": [
          "orders"
        ]
      }
    },
    "/orders/{orderId}/payment-status": {
      "patch": {
        "operationId": "updatePaymentStatus",
        "parameters": [
          {
            "name": "orderId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The order payment status has been successfully updated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Order"
                }
              }
            }
          },
          "400": {
            "description": "Bad request."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Order not found."
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Update order payment status",
        "tags": [
          "orders"
        ]
      }
    },
    "/orders/{id}/refund": {
      "post": {
        "operationId": "requestRefund",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The refund request has been successfully submitted.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Order"
                }
              }
            }
          },
          "400": {
            "description": "Bad request."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Order not found."
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Request a refund for an order",
        "tags": [
          "orders"
        ]
      }
    },
    "/orders/{id}/tracking": {
      "patch": {
        "operationId": "updateTracking",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The order tracking information has been successfully updated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Order"
                }
              }
            }
          },
          "400": {
            "description": "Bad request."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Order not found."
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Update order tracking information",
        "tags": [
          "orders"
        ]
      }
    },
    "/orders/{id}/delivered": {
      "patch": {
        "operationId": "markAsDelivered",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The order has been successfully marked as delivered.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Order"
                }
              }
            }
          },
          "400": {
            "description": "Bad request."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Order not found."
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Mark an order as delivered",
        "tags": [
          "orders"
        ]
      }
    },
    "/catalogues": {
      "post": {
        "operationId": "create",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateCatalogueDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "The catalogue has been successfully created.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Catalogue"
                }
              }
            }
          },
          "400": {
            "description": "Bad request."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Create a new catalogue",
        "tags": [
          "catalogues"
        ]
      },
      "get": {
        "operationId": "findAll",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Return all catalogues.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Catalogue"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get all catalogues",
        "tags": [
          "catalogues"
        ]
      }
    },
    "/catalogues/merchant": {
      "get": {
        "operationId": "findByMerchant",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Return all catalogues for the merchant.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Catalogue"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Merchant not found."
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get all catalogues for a merchant",
        "tags": [
          "catalogues"
        ]
      }
    },
    "/catalogues/{id}": {
      "get": {
        "operationId": "findOne",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Return the catalogue.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Catalogue"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Catalogue not found."
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get a catalogue by id",
        "tags": [
          "catalogues"
        ]
      },
      "patch": {
        "operationId": "update",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateCatalogueDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The catalogue has been successfully updated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Catalogue"
                }
              }
            }
          },
          "400": {
            "description": "Bad request."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Catalogue not found."
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Update a catalogue",
        "tags": [
          "catalogues"
        ]
      },
      "delete": {
        "operationId": "remove",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The catalogue has been successfully deleted."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Catalogue not found."
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Delete a catalogue",
        "tags": [
          "catalogues"
        ]
      }
    },
    "/catalogues/{id}/products/{productId}": {
      "post": {
        "operationId": "addProduct",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "productId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The product has been successfully added to the catalogue.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Catalogue"
                }
              }
            }
          },
          "400": {
            "description": "Bad request."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Catalogue or product not found."
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Add a product to the catalogue",
        "tags": [
          "catalogues"
        ]
      },
      "delete": {
        "operationId": "removeProduct",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "productId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The product has been successfully removed from the catalogue.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Catalogue"
                }
              }
            }
          },
          "400": {
            "description": "Bad request."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Catalogue or product not found."
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Remove a product from the catalogue",
        "tags": [
          "catalogues"
        ]
      }
    },
    "/catalogues/{id}/publish": {
      "post": {
        "operationId": "publish",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The catalogue has been successfully published.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Catalogue"
                }
              }
            }
          },
          "400": {
            "description": "Bad request."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Catalogue not found."
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Publish a catalogue",
        "tags": [
          "catalogues"
        ]
      }
    },
    "/catalogues/{id}/unpublish": {
      "post": {
        "operationId": "unpublish",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The catalogue has been successfully unpublished.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Catalogue"
                }
              }
            }
          },
          "400": {
            "description": "Bad request."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Catalogue not found."
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Unpublish a catalogue",
        "tags": [
          "catalogues"
        ]
      }
    },
    "/catalogues/{id}/view": {
      "post": {
        "operationId": "incrementViewCount",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The catalogue view count has been successfully incremented.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Catalogue"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized."
          },
          "404": {
            "description": "Catalogue not found."
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Increment catalogue view count",
        "tags": [
          "catalogues"
        ]
      }
    },
    "/catalogues/{id}/rate": {
      "post": {
        "operationId": "rate",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The catalogue has been successfully rated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Catalogue"
                }
              }
            }
          },
          "400": {
            "description": "Bad request."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Catalogue not found."
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Rate a catalogue",
        "tags": [
          "catalogues"
        ]
      }
    },
    "/carts": {
      "post": {
        "operationId": "create",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateCartDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "The cart has been successfully created.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Cart"
                }
              }
            }
          },
          "400": {
            "description": "Bad request."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Create a new cart",
        "tags": [
          "carts"
        ]
      },
      "get": {
        "operationId": "findAll",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Return all carts.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Cart"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get all carts",
        "tags": [
          "carts"
        ]
      }
    },
    "/carts/customer/{customerId}": {
      "get": {
        "operationId": "findByCustomer",
        "parameters": [
          {
            "name": "customerId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Return all carts for the customer.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Cart"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Customer not found."
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get all carts for a customer",
        "tags": [
          "carts"
        ]
      }
    },
    "/carts/{id}": {
      "get": {
        "operationId": "findOne",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Return the cart.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Cart"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Cart not found."
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get a cart by id",
        "tags": [
          "carts"
        ]
      },
      "patch": {
        "operationId": "update",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateCartDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The cart has been successfully updated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Cart"
                }
              }
            }
          },
          "400": {
            "description": "Bad request."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Cart not found."
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Update a cart",
        "tags": [
          "carts"
        ]
      },
      "delete": {
        "operationId": "remove",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The cart has been successfully deleted."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Cart not found."
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Delete a cart",
        "tags": [
          "carts"
        ]
      }
    },
    "/carts/{id}/items": {
      "post": {
        "operationId": "addItem",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateCartItemDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The item has been successfully added to the cart.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Cart"
                }
              }
            }
          },
          "400": {
            "description": "Bad request."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Cart not found."
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Add an item to the cart",
        "tags": [
          "carts"
        ]
      }
    },
    "/carts/{id}/items/{productId}/{merchantId}": {
      "delete": {
        "operationId": "removeItem",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "productId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "merchantId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The item has been successfully removed from the cart.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Cart"
                }
              }
            }
          },
          "400": {
            "description": "Bad request."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Cart or item not found."
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Remove an item from the cart",
        "tags": [
          "carts"
        ]
      }
    },
    "/carts/{id}/items/{productId}/{merchantId}/quantity": {
      "patch": {
        "operationId": "updateItemQuantity",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "productId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "merchantId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The item quantity has been successfully updated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Cart"
                }
              }
            }
          },
          "400": {
            "description": "Bad request."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Cart or item not found."
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Update item quantity in the cart",
        "tags": [
          "carts"
        ]
      }
    },
    "/carts/{id}/clear": {
      "post": {
        "operationId": "clearCart",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The cart has been successfully cleared.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Cart"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Cart not found."
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Clear all items from the cart",
        "tags": [
          "carts"
        ]
      }
    },
    "/carts/{id}/abandon": {
      "post": {
        "operationId": "markAsAbandoned",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The cart has been successfully marked as abandoned.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Cart"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Cart not found."
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Mark a cart as abandoned",
        "tags": [
          "carts"
        ]
      }
    },
    "/carts/{id}/checkout": {
      "post": {
        "operationId": "markAsCheckedOut",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The cart has been successfully marked as checked out.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Cart"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Cart not found."
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Mark a cart as checked out",
        "tags": [
          "carts"
        ]
      }
    },
    "/carts/{id}/calculate": {
      "post": {
        "operationId": "calculateTotals",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The cart totals have been successfully calculated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Cart"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Cart not found."
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Calculate cart totals",
        "tags": [
          "carts"
        ]
      }
    }
  },
  "info": {
    "title": "One Yaad Marketplace API",
    "description": "",
    "version": "1.0",
    "contact": {}
  },
  "tags": [],
  "servers": [],
  "components": {
    "schemas": {
      "LoginDto": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "description": "User email address",
            "example": "user@example.com"
          },
          "password": {
            "type": "string",
            "description": "User password",
            "example": "password123",
            "minLength": 8
          }
        },
        "required": [
          "email",
          "password"
        ]
      },
      "RefreshTokenDto": {
        "type": "object",
        "properties": {
          "refreshToken": {
            "type": "string",
            "description": "Refresh token",
            "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
          }
        },
        "required": [
          "refreshToken"
        ]
      },
      "LogoutDto": {
        "type": "object",
        "properties": {
          "tokenId": {
            "type": "string",
            "description": "Token ID to revoke",
            "example": "507f1f77bcf86cd799439011"
          }
        },
        "required": [
          "tokenId"
        ]
      },
      "SwitchRoleDto": {
        "type": "object",
        "properties": {
          "role": {
            "type": "string",
            "description": "Role to switch to",
            "enum": [
              "admin",
              "merchant",
              "customer"
            ],
            "example": "customer"
          }
        },
        "required": [
          "role"
        ]
      },
      "RegisterDto": {
        "type": "object",
        "properties": {
          "username": {
            "type": "string",
            "description": "Username",
            "example": "johndoe"
          },
          "email": {
            "type": "string",
            "description": "Email address",
            "example": "john.doe@example.com"
          },
          "password": {
            "type": "string",
            "description": "Password (minimum 8 characters)",
            "example": "password123"
          },
          "firstName": {
            "type": "string",
            "description": "First name",
            "example": "John"
          },
          "lastName": {
            "type": "string",
            "description": "Last name",
            "example": "Doe"
          },
          "eSignature": {
            "type": "string",
            "description": "Electronic signature",
            "example": "John Doe"
          },
          "phone": {
            "type": "string",
            "description": "Phone number",
            "example": "+1234567890"
          },
          "address": {
            "type": "string",
            "description": "Address",
            "example": "123 Main St, City, Country"
          },
          "role": {
            "type": "string",
            "description": "Initial user role",
            "enum": [
              "admin",
              "merchant",
              "customer"
            ],
            "example": "customer",
            "default": "customer"
          }
        },
        "required": [
          "username",
          "email",
          "password",
          "firstName",
          "lastName",
          "eSignature",
          "role"
        ]
      },
      "AddRoleDto": {
        "type": "object",
        "properties": {
          "role": {
            "type": "string",
            "description": "Role to add to the user",
            "enum": [
              "admin",
              "merchant",
              "customer"
            ],
            "example": "merchant"
          }
        },
        "required": [
          "role"
        ]
      },
      "CreateUserDto": {
        "type": "object",
        "properties": {
          "firstName": {
            "type": "string",
            "description": "User first name",
            "example": "John"
          },
          "lastName": {
            "type": "string",
            "description": "User last name",
            "example": "Doe"
          },
          "email": {
            "type": "string",
            "description": "User email address",
            "example": "john.doe@example.com"
          },
          "password": {
            "type": "string",
            "description": "User password (minimum 8 characters)",
            "example": "password123",
            "minLength": 8
          },
          "phone": {
            "type": "string",
            "description": "User phone number",
            "example": "+1234567890"
          },
          "address": {
            "type": "string",
            "description": "User address",
            "example": "123 Main St, City, Country"
          },
          "roles": {
            "type": "string",
            "description": "User roles",
            "enum": [
              "admin",
              "merchant",
              "customer"
            ],
            "example": [
              "customer"
            ],
            "default": [
              "customer"
            ]
          },
          "activeRole": {
            "type": "string",
            "description": "Active user role",
            "enum": [
              "admin",
              "merchant",
              "customer"
            ],
            "example": "customer",
            "default": "customer"
          },
          "acceptedTermsAndPrivacy": {
            "type": "boolean",
            "description": "Whether user has accepted terms and privacy policy",
            "example": true,
            "default": false
          },
          "policiesAcceptedAt": {
            "format": "date-time",
            "type": "string",
            "description": "Date when policies were accepted",
            "example": "2024-03-15T00:00:00.000Z"
          }
        },
        "required": [
          "firstName",
          "lastName",
          "email",
          "password",
          "roles",
          "activeRole",
          "acceptedTermsAndPrivacy"
        ]
      },
      "UpdateUserDto": {
        "type": "object",
        "properties": {
          "firstName": {
            "type": "string",
            "description": "User first name",
            "example": "John"
          },
          "lastName": {
            "type": "string",
            "description": "User last name",
            "example": "Doe"
          },
          "email": {
            "type": "string",
            "description": "User email address",
            "example": "john.doe@example.com"
          },
          "password": {
            "type": "string",
            "description": "User password (minimum 8 characters)",
            "example": "password123",
            "minLength": 8
          },
          "role": {
            "type": "string",
            "description": "User role",
            "enum": [
              "admin",
              "merchant",
              "customer"
            ],
            "example": "customer"
          },
          "roles": {
            "type": "string",
            "description": "User roles",
            "enum": [
              "admin",
              "merchant",
              "customer"
            ],
            "example": [
              "customer"
            ]
          },
          "activeRole": {
            "type": "string",
            "description": "Active user role",
            "enum": [
              "admin",
              "merchant",
              "customer"
            ],
            "example": "customer"
          },
          "status": {
            "type": "string",
            "description": "User status",
            "enum": [
              "pending",
              "active",
              "suspended",
              "deleted"
            ],
            "example": "active"
          },
          "phone": {
            "type": "string",
            "description": "User phone number",
            "example": "+1234567890"
          },
          "address": {
            "type": "string",
            "description": "User address",
            "example": "123 Main St, City, Country"
          },
          "profilePicture": {
            "type": "string",
            "description": "User profile picture URL",
            "example": "https://example.com/profile.jpg"
          }
        }
      },
      "ObjectId": {
        "type": "object",
        "properties": {}
      },
      "CreateProductDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Product name",
            "example": "iPhone 13 Pro"
          },
          "description": {
            "type": "string",
            "description": "Product description",
            "example": "Latest iPhone with A15 Bionic chip"
          },
          "price": {
            "type": "number",
            "description": "Product price",
            "example": 999.99,
            "minimum": 0
          },
          "stock": {
            "type": "number",
            "description": "Product stock quantity",
            "example": 100,
            "minimum": 0
          },
          "merchant": {
            "description": "Merchant ID",
            "example": "507f1f77bcf86cd799439011",
            "allOf": [
              {
                "$ref": "#/components/schemas/ObjectId"
              }
            ]
          },
          "categories": {
            "description": "Product categories",
            "example": [
              "Electronics",
              "Smartphones"
            ],
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "images": {
            "description": "Product images URLs",
            "example": [
              "https://example.com/image1.jpg",
              "https://example.com/image2.jpg"
            ],
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "isActive": {
            "type": "boolean",
            "description": "Product active status",
            "example": true
          }
        },
        "required": [
          "name",
          "description",
          "price",
          "stock",
          "merchant"
        ]
      },
      "Product": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Product name",
            "example": "iPhone 13 Pro"
          },
          "description": {
            "type": "string",
            "description": "Product description",
            "example": "Latest iPhone with A15 Bionic chip"
          },
          "price": {
            "type": "number",
            "description": "Product price",
            "example": 999.99,
            "minimum": 0
          },
          "stock": {
            "type": "number",
            "description": "Product stock quantity",
            "example": 100,
            "minimum": 0
          },
          "merchant": {
            "description": "Merchant ID",
            "example": "507f1f77bcf86cd799439011",
            "allOf": [
              {
                "$ref": "#/components/schemas/ObjectId"
              }
            ]
          },
          "categories": {
            "description": "Product categories",
            "example": [
              "Electronics",
              "Smartphones"
            ],
            "default": [],
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "images": {
            "description": "Product images URLs",
            "example": [
              "https://example.com/image1.jpg",
              "https://example.com/image2.jpg"
            ],
            "default": [],
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "isActive": {
            "type": "boolean",
            "description": "Product active status",
            "example": true,
            "default": true
          },
          "rating": {
            "type": "number",
            "description": "Product rating",
            "example": 4.5,
            "minimum": 0,
            "default": 0
          },
          "reviewCount": {
            "type": "number",
            "description": "Number of reviews",
            "example": 10,
            "minimum": 0,
            "default": 0
          }
        },
        "required": [
          "name",
          "description",
          "price",
          "stock",
          "merchant",
          "categories",
          "images",
          "isActive",
          "rating",
          "reviewCount"
        ]
      },
      "UpdateProductDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Product name",
            "example": "iPhone 13 Pro"
          },
          "description": {
            "type": "string",
            "description": "Product description",
            "example": "Latest iPhone with A15 Bionic chip"
          },
          "price": {
            "type": "number",
            "description": "Product price",
            "example": 999.99,
            "minimum": 0
          },
          "stock": {
            "type": "number",
            "description": "Product stock quantity",
            "example": 100,
            "minimum": 0
          },
          "merchant": {
            "description": "Merchant ID",
            "example": "507f1f77bcf86cd799439011",
            "allOf": [
              {
                "$ref": "#/components/schemas/ObjectId"
              }
            ]
          },
          "categories": {
            "description": "Product categories",
            "example": [
              "Electronics",
              "Smartphones"
            ],
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "images": {
            "description": "Product images URLs",
            "example": [
              "https://example.com/image1.jpg",
              "https://example.com/image2.jpg"
            ],
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "isActive": {
            "type": "boolean",
            "description": "Product active status",
            "example": true
          },
          "rating": {
            "type": "number",
            "description": "Product rating",
            "example": 4.5,
            "minimum": 0
          }
        }
      },
      "CreatePaymentDto": {
        "type": "object",
        "properties": {
          "order": {
            "type": "string",
            "description": "Order ID",
            "example": "507f1f77bcf86cd799439011"
          },
          "customer": {
            "type": "string",
            "description": "Customer ID",
            "example": "507f1f77bcf86cd799439012"
          },
          "merchant": {
            "type": "string",
            "description": "Merchant ID",
            "example": "507f1f77bcf86cd799439013"
          },
          "amount": {
            "type": "number",
            "description": "Payment amount",
            "example": 99.99,
            "minimum": 0
          },
          "method": {
            "type": "string",
            "description": "Payment method",
            "enum": [
              "credit_card",
              "debit_card",
              "bank_transfer",
              "cash"
            ],
            "example": "credit_card"
          },
          "transactionId": {
            "type": "string",
            "description": "Transaction ID from payment provider",
            "example": "txn_123456789"
          }
        },
        "required": [
          "order",
          "customer",
          "merchant",
          "amount",
          "method"
        ]
      },
      "Payment": {
        "type": "object",
        "properties": {
          "order": {
            "description": "Order ID",
            "example": "507f1f77bcf86cd799439011",
            "allOf": [
              {
                "$ref": "#/components/schemas/ObjectId"
              }
            ]
          },
          "customer": {
            "description": "Customer ID",
            "example": "507f1f77bcf86cd799439012",
            "allOf": [
              {
                "$ref": "#/components/schemas/ObjectId"
              }
            ]
          },
          "merchant": {
            "description": "Merchant ID",
            "example": "507f1f77bcf86cd799439013",
            "allOf": [
              {
                "$ref": "#/components/schemas/ObjectId"
              }
            ]
          },
          "amount": {
            "type": "number",
            "description": "Payment amount",
            "example": 99.99
          },
          "status": {
            "type": "string",
            "description": "Payment status",
            "enum": [
              "pending",
              "completed",
              "failed",
              "refunded"
            ],
            "example": "pending"
          },
          "method": {
            "type": "string",
            "description": "Payment method",
            "enum": [
              "credit_card",
              "debit_card",
              "bank_transfer",
              "cash"
            ],
            "example": "credit_card"
          },
          "transactionId": {
            "type": "string",
            "description": "Transaction ID from payment provider",
            "example": "txn_123456789"
          },
          "errorMessage": {
            "type": "string",
            "description": "Error message if payment failed",
            "example": "Insufficient funds"
          },
          "refundReason": {
            "type": "string",
            "description": "Reason for refund",
            "example": "Customer requested refund"
          }
        },
        "required": [
          "order",
          "customer",
          "merchant",
          "amount",
          "status",
          "method"
        ]
      },
      "UpdatePaymentDto": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "description": "Payment status",
            "enum": [
              "pending",
              "completed",
              "failed",
              "refunded"
            ],
            "example": "completed"
          },
          "transactionId": {
            "type": "string",
            "description": "Transaction ID from payment provider",
            "example": "txn_123456789"
          },
          "errorMessage": {
            "type": "string",
            "description": "Error message if payment failed",
            "example": "Insufficient funds"
          },
          "refundReason": {
            "type": "string",
            "description": "Reason for refund",
            "example": "Customer requested refund"
          }
        }
      },
      "CreateOrderItemDto": {
        "type": "object",
        "properties": {
          "product": {
            "type": "string",
            "description": "Product ID",
            "example": "507f1f77bcf86cd799439011"
          },
          "merchant": {
            "type": "string",
            "description": "Merchant ID",
            "example": "507f1f77bcf86cd799439012"
          },
          "quantity": {
            "type": "number",
            "description": "Quantity of the product",
            "example": 2,
            "minimum": 1
          },
          "price": {
            "type": "number",
            "description": "Price of the product",
            "example": 99.99,
            "minimum": 0
          },
          "shippingAddress": {
            "type": "string",
            "description": "Shipping address for this item",
            "example": "123 Main St, City, Country"
          }
        },
        "required": [
          "product",
          "merchant",
          "quantity",
          "price"
        ]
      },
      "CreateOrderDto": {
        "type": "object",
        "properties": {
          "customer": {
            "type": "string",
            "description": "Customer ID",
            "example": "507f1f77bcf86cd799439013"
          },
          "items": {
            "description": "Order items",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CreateOrderItemDto"
            }
          },
          "totalItems": {
            "type": "number",
            "description": "Total number of items in the order",
            "example": 5,
            "minimum": 1
          },
          "totalAmount": {
            "type": "number",
            "description": "Total amount of the order",
            "example": 499.95,
            "minimum": 0
          },
          "shippingAddress": {
            "type": "string",
            "description": "Shipping address for the entire order",
            "example": "123 Main St, City, Country"
          },
          "notes": {
            "type": "string",
            "description": "Additional notes for the order",
            "example": "Please deliver in the evening"
          }
        },
        "required": [
          "customer",
          "items",
          "totalItems",
          "totalAmount"
        ]
      },
      "OrderItem": {
        "type": "object",
        "properties": {
          "product": {
            "description": "Product ID",
            "example": "507f1f77bcf86cd799439011",
            "allOf": [
              {
                "$ref": "#/components/schemas/ObjectId"
              }
            ]
          },
          "merchant": {
            "description": "Merchant ID",
            "example": "507f1f77bcf86cd799439012",
            "allOf": [
              {
                "$ref": "#/components/schemas/ObjectId"
              }
            ]
          },
          "quantity": {
            "type": "number",
            "description": "Quantity of the product",
            "example": 2,
            "minimum": 1
          },
          "price": {
            "type": "number",
            "description": "Price of the product",
            "example": 99.99,
            "minimum": 0
          },
          "shippingAddress": {
            "type": "string",
            "description": "Shipping address for this item",
            "example": "123 Main St, City, Country"
          }
        },
        "required": [
          "product",
          "merchant",
          "quantity",
          "price"
        ]
      },
      "Order": {
        "type": "object",
        "properties": {
          "customer": {
            "description": "Customer ID",
            "example": "507f1f77bcf86cd799439013",
            "allOf": [
              {
                "$ref": "#/components/schemas/ObjectId"
              }
            ]
          },
          "items": {
            "description": "Order items",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OrderItem"
            }
          },
          "totalItems": {
            "type": "number",
            "description": "Total number of items in the order",
            "example": 5,
            "minimum": 1
          },
          "totalAmount": {
            "type": "number",
            "description": "Total amount of the order",
            "example": 499.95,
            "minimum": 0
          },
          "status": {
            "type": "string",
            "description": "Order status",
            "enum": [
              "pending",
              "processing",
              "shipped",
              "out_for_delivery",
              "delivered",
              "completed",
              "cancelled",
              "refunded"
            ],
            "example": "pending"
          },
          "paymentStatus": {
            "type": "string",
            "description": "Payment status",
            "enum": [
              "pending",
              "completed",
              "failed",
              "refunded"
            ],
            "example": "pending"
          },
          "payment": {
            "description": "Payment ID",
            "example": "507f1f77bcf86cd799439014",
            "allOf": [
              {
                "$ref": "#/components/schemas/ObjectId"
              }
            ]
          },
          "shippingAddress": {
            "type": "string",
            "description": "Shipping address",
            "example": "123 Main St, City, Country"
          },
          "trackingNumber": {
            "type": "string",
            "description": "Tracking number for the shipment",
            "example": "TRK123456789"
          },
          "estimatedDeliveryDate": {
            "format": "date-time",
            "type": "string",
            "description": "Estimated delivery date",
            "example": "2024-03-20T00:00:00.000Z"
          },
          "cancellationReason": {
            "type": "string",
            "description": "Reason for order cancellation",
            "example": "Customer requested cancellation"
          },
          "refundReason": {
            "type": "string",
            "description": "Reason for order refund",
            "example": "Product damaged during shipping"
          },
          "notes": {
            "type": "string",
            "description": "Additional notes for the order",
            "example": "Please deliver in the evening"
          },
          "processedAt": {
            "format": "date-time",
            "type": "string",
            "description": "Date when the order was processed",
            "example": "2024-03-15T00:00:00.000Z"
          },
          "completedAt": {
            "format": "date-time",
            "type": "string",
            "description": "Date when the order was completed",
            "example": "2024-03-20T00:00:00.000Z"
          },
          "cancelledAt": {
            "format": "date-time",
            "type": "string",
            "description": "Date when the order was cancelled",
            "example": "2024-03-16T00:00:00.000Z"
          },
          "refundedAt": {
            "format": "date-time",
            "type": "string",
            "description": "Date when the order was refunded",
            "example": "2024-03-17T00:00:00.000Z"
          }
        },
        "required": [
          "customer",
          "items",
          "totalItems",
          "totalAmount",
          "status",
          "paymentStatus",
          "shippingAddress"
        ]
      },
      "UpdateOrderDto": {
        "type": "object",
        "properties": {
          "items": {
            "description": "Order items",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CreateOrderItemDto"
            }
          },
          "totalItems": {
            "type": "number",
            "description": "Total number of items in the order",
            "example": 5,
            "minimum": 1
          },
          "totalAmount": {
            "type": "number",
            "description": "Total amount of the order",
            "example": 499.95,
            "minimum": 0
          },
          "status": {
            "type": "string",
            "description": "Order status",
            "enum": [
              "pending",
              "processing",
              "shipped",
              "out_for_delivery",
              "delivered",
              "completed",
              "cancelled",
              "refunded"
            ],
            "example": "processing"
          },
          "paymentStatus": {
            "type": "string",
            "description": "Payment status",
            "enum": [
              "pending",
              "completed",
              "failed",
              "refunded"
            ],
            "example": "completed"
          },
          "payment": {
            "type": "string",
            "description": "Payment ID",
            "example": "507f1f77bcf86cd799439014"
          },
          "shippingAddress": {
            "type": "string",
            "description": "Shipping address",
            "example": "123 Main St, City, Country"
          },
          "trackingNumber": {
            "type": "string",
            "description": "Tracking number for the shipment",
            "example": "TRK123456789"
          },
          "estimatedDeliveryDate": {
            "format": "date-time",
            "type": "string",
            "description": "Estimated delivery date",
            "example": "2024-03-20T00:00:00.000Z"
          },
          "cancellationReason": {
            "type": "string",
            "description": "Reason for order cancellation",
            "example": "Customer requested cancellation"
          },
          "refundReason": {
            "type": "string",
            "description": "Reason for order refund",
            "example": "Product damaged during shipping"
          },
          "notes": {
            "type": "string",
            "description": "Additional notes for the order",
            "example": "Please deliver in the evening"
          }
        }
      },
      "CreateCatalogueDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Name of the catalogue",
            "example": "Summer Collection 2024"
          },
          "description": {
            "type": "string",
            "description": "Description of the catalogue",
            "example": "Our latest summer collection featuring beach wear and accessories"
          },
          "merchant": {
            "type": "string",
            "description": "Merchant ID",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "products": {
            "description": "Array of product IDs",
            "example": [
              "123e4567-e89b-12d3-a456-426614174001",
              "123e4567-e89b-12d3-a456-426614174002"
            ],
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "status": {
            "type": "string",
            "description": "Status of the catalogue",
            "enum": [
              "active",
              "inactive",
              "draft"
            ],
            "example": "draft"
          },
          "isPublic": {
            "type": "boolean",
            "description": "Whether the catalogue is public",
            "example": false
          },
          "publishedAt": {
            "format": "date-time",
            "type": "string",
            "description": "Date when the catalogue was published",
            "example": "2024-03-15T00:00:00.000Z"
          },
          "expiresAt": {
            "format": "date-time",
            "type": "string",
            "description": "Date when the catalogue expires",
            "example": "2024-09-15T00:00:00.000Z"
          },
          "tags": {
            "description": "Array of tags",
            "example": [
              "summer",
              "beach",
              "accessories"
            ],
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "required": [
          "name",
          "merchant"
        ]
      },
      "Catalogue": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "The name of the catalogue",
            "example": "Summer Collection 2024"
          },
          "description": {
            "type": "string",
            "description": "The description of the catalogue",
            "example": "A collection of summer essentials for the season"
          },
          "merchant": {
            "type": "string",
            "description": "The ID of the merchant who owns the catalogue",
            "example": "507f1f77bcf86cd799439012"
          },
          "products": {
            "description": "The list of product IDs in the catalogue",
            "example": [
              "507f1f77bcf86cd799439011",
              "507f1f77bcf86cd799439013"
            ],
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "status": {
            "type": "string",
            "description": "The status of the catalogue",
            "enum": [
              "active",
              "inactive",
              "draft"
            ],
            "example": "draft"
          },
          "isPublic": {
            "type": "boolean",
            "description": "Whether the catalogue is public",
            "example": false
          },
          "publishedAt": {
            "format": "date-time",
            "type": "string",
            "description": "The date when the catalogue was published",
            "example": "2024-03-20T10:00:00Z"
          },
          "expiresAt": {
            "format": "date-time",
            "type": "string",
            "description": "The date when the catalogue expires",
            "example": "2024-09-20T10:00:00Z"
          },
          "tags": {
            "description": "The tags associated with the catalogue",
            "example": [
              "summer",
              "clothing",
              "accessories"
            ],
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "viewCount": {
            "type": "number",
            "description": "The number of times the catalogue has been viewed",
            "example": 150
          },
          "productCount": {
            "type": "number",
            "description": "The number of products in the catalogue",
            "example": 25
          },
          "isFeatured": {
            "type": "boolean",
            "description": "Whether the catalogue is featured",
            "example": false
          },
          "featuredAt": {
            "format": "date-time",
            "type": "string",
            "description": "The date when the catalogue was featured",
            "example": "2024-03-20T10:00:00Z"
          },
          "rating": {
            "type": "number",
            "description": "The average rating of the catalogue",
            "example": 4.5
          },
          "reviewCount": {
            "type": "number",
            "description": "The number of reviews for the catalogue",
            "example": 10
          }
        },
        "required": [
          "name",
          "merchant",
          "products",
          "status",
          "isPublic",
          "tags",
          "viewCount",
          "productCount",
          "isFeatured",
          "rating",
          "reviewCount"
        ]
      },
      "UpdateCatalogueDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Name of the catalogue",
            "example": "Summer Collection 2024"
          },
          "description": {
            "type": "string",
            "description": "Description of the catalogue",
            "example": "Our latest summer collection featuring beach wear and accessories"
          },
          "products": {
            "description": "Array of product IDs",
            "example": [
              "123e4567-e89b-12d3-a456-426614174001",
              "123e4567-e89b-12d3-a456-426614174002"
            ],
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "status": {
            "type": "string",
            "description": "Status of the catalogue",
            "enum": [
              "active",
              "inactive",
              "draft"
            ],
            "example": "active"
          },
          "isPublic": {
            "type": "boolean",
            "description": "Whether the catalogue is public",
            "example": true
          },
          "publishedAt": {
            "format": "date-time",
            "type": "string",
            "description": "Date when the catalogue was published",
            "example": "2024-03-15T00:00:00.000Z"
          },
          "expiresAt": {
            "format": "date-time",
            "type": "string",
            "description": "Date when the catalogue expires",
            "example": "2024-09-15T00:00:00.000Z"
          },
          "tags": {
            "description": "Array of tags",
            "example": [
              "summer",
              "beach",
              "accessories"
            ],
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "CreateCartItemDto": {
        "type": "object",
        "properties": {
          "product": {
            "type": "string",
            "description": "Product ID",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "merchant": {
            "type": "string",
            "description": "Merchant ID",
            "example": "123e4567-e89b-12d3-a456-426614174001"
          },
          "quantity": {
            "type": "number",
            "description": "Quantity of the product",
            "example": 2,
            "minimum": 1
          },
          "price": {
            "type": "number",
            "description": "Price of the product",
            "example": 99.99,
            "minimum": 0
          },
          "shippingAddress": {
            "type": "string",
            "description": "Shipping address for this item",
            "example": "123 Main St, City, Country"
          }
        },
        "required": [
          "product",
          "merchant",
          "quantity",
          "price"
        ]
      },
      "CreateCartDto": {
        "type": "object",
        "properties": {
          "customer": {
            "type": "string",
            "description": "Customer ID",
            "example": "123e4567-e89b-12d3-a456-426614174002"
          },
          "items": {
            "description": "Cart items",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CreateCartItemDto"
            }
          },
          "shippingAddress": {
            "type": "string",
            "description": "Default shipping address for the cart",
            "example": "123 Main St, City, Country"
          }
        },
        "required": [
          "customer"
        ]
      },
      "CartItem": {
        "type": "object",
        "properties": {
          "product": {
            "type": "string",
            "description": "The ID of the product in the cart",
            "example": "507f1f77bcf86cd799439011"
          },
          "merchant": {
            "type": "string",
            "description": "The ID of the merchant selling the product",
            "example": "507f1f77bcf86cd799439012"
          },
          "quantity": {
            "type": "number",
            "description": "The quantity of the product in the cart",
            "example": 2,
            "minimum": 1
          },
          "price": {
            "type": "number",
            "description": "The price of the product",
            "example": 29.99,
            "minimum": 0
          },
          "shippingAddress": {
            "type": "string",
            "description": "The shipping address for this item",
            "example": "123 Main St, City, Country"
          }
        },
        "required": [
          "product",
          "merchant",
          "quantity",
          "price"
        ]
      },
      "Cart": {
        "type": "object",
        "properties": {
          "customer": {
            "type": "string",
            "description": "The ID of the customer who owns the cart",
            "example": "507f1f77bcf86cd799439013"
          },
          "items": {
            "description": "The items in the cart",
            "example": [
              {
                "product": "507f1f77bcf86cd799439011",
                "merchant": "507f1f77bcf86cd799439012",
                "quantity": 2,
                "price": 29.99,
                "shippingAddress": "123 Main St, City, Country"
              }
            ],
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CartItem"
            }
          },
          "totalItems": {
            "type": "number",
            "description": "The total number of items in the cart",
            "example": 2
          },
          "totalAmount": {
            "type": "number",
            "description": "The total amount of the cart",
            "example": 59.98
          },
          "isAbandoned": {
            "type": "boolean",
            "description": "Whether the cart has been abandoned",
            "example": false
          },
          "abandonedAt": {
            "format": "date-time",
            "type": "string",
            "description": "The date when the cart was abandoned",
            "example": "2024-03-20T10:00:00Z"
          },
          "lastUpdatedAt": {
            "format": "date-time",
            "type": "string",
            "description": "The date when the cart was last updated",
            "example": "2024-03-20T10:00:00Z"
          },
          "expiresAt": {
            "format": "date-time",
            "type": "string",
            "description": "The date when the cart expires",
            "example": "2024-03-27T10:00:00Z"
          },
          "isCheckedOut": {
            "type": "boolean",
            "description": "Whether the cart has been checked out",
            "example": false
          },
          "checkedOutAt": {
            "format": "date-time",
            "type": "string",
            "description": "The date when the cart was checked out",
            "example": "2024-03-20T10:00:00Z"
          }
        },
        "required": [
          "customer",
          "items",
          "totalItems",
          "totalAmount",
          "isAbandoned",
          "lastUpdatedAt",
          "isCheckedOut"
        ]
      },
      "UpdateCartDto": {
        "type": "object",
        "properties": {
          "items": {
            "description": "Cart items",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CreateCartItemDto"
            }
          },
          "shippingAddress": {
            "type": "string",
            "description": "Default shipping address for the cart",
            "example": "123 Main St, City, Country"
          },
          "isAbandoned": {
            "type": "boolean",
            "description": "Whether the cart is abandoned",
            "example": false
          },
          "abandonedAt": {
            "format": "date-time",
            "type": "string",
            "description": "Date when the cart was abandoned",
            "example": "2024-03-15T00:00:00.000Z"
          },
          "expiresAt": {
            "format": "date-time",
            "type": "string",
            "description": "Date when the cart expires",
            "example": "2024-03-22T00:00:00.000Z"
          },
          "isCheckedOut": {
            "type": "boolean",
            "description": "Whether the cart has been checked out",
            "example": false
          },
          "checkedOutAt": {
            "format": "date-time",
            "type": "string",
            "description": "Date when the cart was checked out",
            "example": "2024-03-15T00:00:00.000Z"
          },
          "totalItems": {
            "type": "number",
            "description": "Total number of items in the cart",
            "example": 5,
            "minimum": 0
          },
          "totalAmount": {
            "type": "number",
            "description": "Total amount of the cart",
            "example": 499.95,
            "minimum": 0
          }
        }
      }
    }
  }
}